import { SourceInfo } from "./source";
import { NullValue } from "../../../protobuf/struct";
import * as _m0 from "protobufjs/minimal";
import { Long } from "@osmonauts/helpers";
/** An expression together with source information as returned by the parser. */
export interface ParsedExpr {
    /** The parsed expression. */
    expr: Expr;
    /** The source info derived from input that generated the parsed `expr`. */
    sourceInfo: SourceInfo;
    /** The syntax version of the source, e.g. `cel1`. */
    syntaxVersion: string;
}
/**
 * An abstract representation of a common expression.
 *
 * Expressions are abstractly represented as a collection of identifiers,
 * select statements, function calls, literals, and comprehensions. All
 * operators with the exception of the '.' operator are modelled as function
 * calls. This makes it easy to represent new operators into the existing AST.
 *
 * All references within expressions must resolve to a [Decl][google.api.expr.v1beta1.Decl] provided at
 * type-check for an expression to be valid. A reference may either be a bare
 * identifier `name` or a qualified identifier `google.api.name`. References
 * may either refer to a value or a function declaration.
 *
 * For example, the expression `google.api.name.startsWith('expr')` references
 * the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1beta1.Expr.Select] expression, and
 * the function declaration `startsWith`.
 */
export interface Expr {
    /**
     * Required. An id assigned to this node by the parser which is unique in a
     * given expression tree. This is used to associate type information and other
     * attributes to a node in the parse tree.
     */
    id: number;
    /** A literal expression. */
    literalExpr?: Literal;
    /** An identifier expression. */
    identExpr?: Expr_Ident;
    /** A field selection expression, e.g. `request.auth`. */
    selectExpr?: Expr_Select;
    /** A call expression, including calls to predefined functions and operators. */
    callExpr?: Expr_Call;
    /** A list creation expression. */
    listExpr?: Expr_CreateList;
    /** A map or object creation expression. */
    structExpr?: Expr_CreateStruct;
    /** A comprehension expression. */
    comprehensionExpr?: Expr_Comprehension;
}
/** An identifier expression. e.g. `request`. */
export interface Expr_Ident {
    /**
     * Required. Holds a single, unqualified identifier, possibly preceded by a
     * '.'.
     *
     * Qualified names are represented by the [Expr.Select][google.api.expr.v1beta1.Expr.Select] expression.
     */
    name: string;
}
/** A field selection expression. e.g. `request.auth`. */
export interface Expr_Select {
    /**
     * Required. The target of the selection expression.
     *
     * For example, in the select expression `request.auth`, the `request`
     * portion of the expression is the `operand`.
     */
    operand: Expr;
    /**
     * Required. The name of the field to select.
     *
     * For example, in the select expression `request.auth`, the `auth` portion
     * of the expression would be the `field`.
     */
    field: string;
    /**
     * Whether the select is to be interpreted as a field presence test.
     *
     * This results from the macro `has(request.auth)`.
     */
    testOnly: boolean;
}
/**
 * A call expression, including calls to predefined functions and operators.
 *
 * For example, `value == 10`, `size(map_value)`.
 */
export interface Expr_Call {
    /**
     * The target of an method call-style expression. For example, `x` in
     * `x.f()`.
     */
    target: Expr;
    /** Required. The name of the function or method being called. */
    function: string;
    /** The arguments. */
    args: Expr[];
}
/**
 * A list creation expression.
 *
 * Lists may either be homogenous, e.g. `[1, 2, 3]`, or heterogenous, e.g.
 * `dyn([1, 'hello', 2.0])`
 */
export interface Expr_CreateList {
    /** The elements part of the list. */
    elements: Expr[];
}
/**
 * A map or message creation expression.
 *
 * Maps are constructed as `{'key_name': 'value'}`. Message construction is
 * similar, but prefixed with a type name and composed of field ids:
 * `types.MyType{field_id: 'value'}`.
 */
export interface Expr_CreateStruct {
    /**
     * The type name of the message to be created, empty when creating map
     * literals.
     */
    type: string;
    /** The entries in the creation expression. */
    entries: Expr_CreateStruct_Entry[];
}
/** Represents an entry. */
export interface Expr_CreateStruct_Entry {
    /**
     * Required. An id assigned to this node by the parser which is unique
     * in a given expression tree. This is used to associate type
     * information and other attributes to the node.
     */
    id: number;
    /** The field key for a message creator statement. */
    fieldKey?: string;
    /** The key expression for a map creation statement. */
    mapKey?: Expr;
    /** Required. The value assigned to the key. */
    value: Expr;
}
/**
 * A comprehension expression applied to a list or map.
 *
 * Comprehensions are not part of the core syntax, but enabled with macros.
 * A macro matches a specific call signature within a parsed AST and replaces
 * the call with an alternate AST block. Macro expansion happens at parse
 * time.
 *
 * The following macros are supported within CEL:
 *
 * Aggregate type macros may be applied to all elements in a list or all keys
 * in a map:
 *
 * *  `all`, `exists`, `exists_one` -  test a predicate expression against
 * the inputs and return `true` if the predicate is satisfied for all,
 * any, or only one value `list.all(x, x < 10)`.
 * *  `filter` - test a predicate expression against the inputs and return
 * the subset of elements which satisfy the predicate:
 * `payments.filter(p, p > 1000)`.
 * *  `map` - apply an expression to all elements in the input and return the
 * output aggregate type: `[1, 2, 3].map(i, i * i)`.
 *
 * The `has(m.x)` macro tests whether the property `x` is present in struct
 * `m`. The semantics of this macro depend on the type of `m`. For proto2
 * messages `has(m.x)` is defined as 'defined, but not set`. For proto3, the
 * macro tests whether the property is set to its default. For map and struct
 * types, the macro tests whether the property `x` is defined on `m`.
 */
export interface Expr_Comprehension {
    /** The name of the iteration variable. */
    iterVar: string;
    /** The range over which var iterates. */
    iterRange: Expr;
    /** The name of the variable used for accumulation of the result. */
    accuVar: string;
    /** The initial value of the accumulator. */
    accuInit: Expr;
    /**
     * An expression which can contain iter_var and accu_var.
     *
     * Returns false when the result has been computed and may be used as
     * a hint to short-circuit the remainder of the comprehension.
     */
    loopCondition: Expr;
    /**
     * An expression which can contain iter_var and accu_var.
     *
     * Computes the next value of accu_var.
     */
    loopStep: Expr;
    /**
     * An expression which can contain accu_var.
     *
     * Computes the result.
     */
    result: Expr;
}
/**
 * Represents a primitive literal.
 *
 * This is similar to the primitives supported in the well-known type
 * `google.protobuf.Value`, but richer so it can represent CEL's full range of
 * primitives.
 *
 * Lists and structs are not included as constants as these aggregate types may
 * contain [Expr][google.api.expr.v1beta1.Expr] elements which require evaluation and are thus not constant.
 *
 * Examples of literals include: `"hello"`, `b'bytes'`, `1u`, `4.2`, `-2`,
 * `true`, `null`.
 */
export interface Literal {
    /** null value. */
    nullValue?: NullValue;
    /** boolean value. */
    boolValue?: boolean;
    /** int64 value. */
    int64Value?: Long;
    /** uint64 value. */
    uint64Value?: Long;
    /** double value. */
    doubleValue?: number;
    /** string value. */
    stringValue?: string;
    /** bytes value. */
    bytesValue?: Uint8Array;
}
export declare const ParsedExpr: {
    encode(message: ParsedExpr, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ParsedExpr;
    fromJSON(object: any): ParsedExpr;
    toJSON(message: ParsedExpr): unknown;
    fromPartial<I extends {
        expr?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        };
        sourceInfo?: {
            location?: string;
            lineOffsets?: number[];
            positions?: {
                [x: number]: number;
            };
        };
        syntaxVersion?: string;
    } & {
        expr?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["expr"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["expr"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["expr"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["expr"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["expr"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["expr"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["expr"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["expr"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["expr"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["expr"], keyof Expr>, never>;
        sourceInfo?: {
            location?: string;
            lineOffsets?: number[];
            positions?: {
                [x: number]: number;
            };
        } & {
            location?: string;
            lineOffsets?: number[] & number[] & Record<Exclude<keyof I["sourceInfo"]["lineOffsets"], keyof number[]>, never>;
            positions?: {
                [x: number]: number;
            } & {
                [x: number]: number;
            } & Record<Exclude<keyof I["sourceInfo"]["positions"], number>, never>;
        } & Record<Exclude<keyof I["sourceInfo"], keyof SourceInfo>, never>;
        syntaxVersion?: string;
    } & Record<Exclude<keyof I, keyof ParsedExpr>, never>>(object: I): ParsedExpr;
};
export declare const Expr: {
    encode(message: Expr, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr;
    fromJSON(object: any): Expr;
    toJSON(message: Expr): unknown;
    fromPartial<I extends {
        id?: number;
        literalExpr?: {
            nullValue?: NullValue;
            boolValue?: boolean;
            int64Value?: any;
            uint64Value?: any;
            doubleValue?: number;
            stringValue?: string;
            bytesValue?: Uint8Array;
        };
        identExpr?: {
            name?: string;
        };
        selectExpr?: {
            operand?: any;
            field?: string;
            testOnly?: boolean;
        };
        callExpr?: {
            target?: any;
            function?: string;
            args?: any[];
        };
        listExpr?: {
            elements?: any[];
        };
        structExpr?: {
            type?: string;
            entries?: {
                id?: number;
                fieldKey?: string;
                mapKey?: any;
                value?: any;
            }[];
        };
        comprehensionExpr?: {
            iterVar?: string;
            iterRange?: any;
            accuVar?: string;
            accuInit?: any;
            loopCondition?: any;
            loopStep?: any;
            result?: any;
        };
    } & {
        id?: number;
        literalExpr?: {
            nullValue?: NullValue;
            boolValue?: boolean;
            int64Value?: any;
            uint64Value?: any;
            doubleValue?: number;
            stringValue?: string;
            bytesValue?: Uint8Array;
        } & {
            nullValue?: NullValue;
            boolValue?: boolean;
            int64Value?: any;
            uint64Value?: any;
            doubleValue?: number;
            stringValue?: string;
            bytesValue?: Uint8Array;
        } & Record<Exclude<keyof I["literalExpr"], keyof Literal>, never>;
        identExpr?: {
            name?: string;
        } & {
            name?: string;
        } & Record<Exclude<keyof I["identExpr"], "name">, never>;
        selectExpr?: {
            operand?: any;
            field?: string;
            testOnly?: boolean;
        } & {
            operand?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["selectExpr"]["operand"], keyof Expr>, never>;
            field?: string;
            testOnly?: boolean;
        } & Record<Exclude<keyof I["selectExpr"], keyof Expr_Select>, never>;
        callExpr?: {
            target?: any;
            function?: string;
            args?: any[];
        } & {
            target?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["callExpr"]["target"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["callExpr"]["target"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["callExpr"]["target"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["callExpr"]["target"], keyof Expr>, never>;
            function?: string;
            args?: any[] & ({
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["callExpr"]["args"], keyof any[]>, never>;
        } & Record<Exclude<keyof I["callExpr"], keyof Expr_Call>, never>;
        listExpr?: {
            elements?: any[];
        } & {
            elements?: any[] & ({
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["listExpr"]["elements"], keyof any[]>, never>;
        } & Record<Exclude<keyof I["listExpr"], "elements">, never>;
        structExpr?: {
            type?: string;
            entries?: {
                id?: number;
                fieldKey?: string;
                mapKey?: any;
                value?: any;
            }[];
        } & {
            type?: string;
            entries?: {
                id?: number;
                fieldKey?: string;
                mapKey?: any;
                value?: any;
            }[] & ({
                id?: number;
                fieldKey?: string;
                mapKey?: any;
                value?: any;
            } & {
                id?: number;
                fieldKey?: string;
                mapKey?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                value?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["structExpr"]["entries"], keyof {
                id?: number;
                fieldKey?: string;
                mapKey?: any;
                value?: any;
            }[]>, never>;
        } & Record<Exclude<keyof I["structExpr"], keyof Expr_CreateStruct>, never>;
        comprehensionExpr?: {
            iterVar?: string;
            iterRange?: any;
            accuVar?: string;
            accuInit?: any;
            loopCondition?: any;
            loopStep?: any;
            result?: any;
        } & {
            iterVar?: string;
            iterRange?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
            accuVar?: string;
            accuInit?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
            loopCondition?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
            loopStep?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
            result?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                identExpr?: {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                } & {
                    operand?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                    field?: string;
                    testOnly?: boolean;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                } & {
                    target?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                    function?: string;
                    args?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                listExpr?: {
                    elements?: any[];
                } & {
                    elements?: any[] & ({
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                } & {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[] & ({
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    } & {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                        value?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                } & {
                    iterVar?: string;
                    iterRange?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                    accuVar?: string;
                    accuInit?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                    loopCondition?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                    loopStep?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                    result?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
            } & Record<Exclude<keyof I["comprehensionExpr"]["result"], keyof Expr>, never>;
        } & Record<Exclude<keyof I["comprehensionExpr"], keyof Expr_Comprehension>, never>;
    } & Record<Exclude<keyof I, keyof Expr>, never>>(object: I): Expr;
};
export declare const Expr_Ident: {
    encode(message: Expr_Ident, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_Ident;
    fromJSON(object: any): Expr_Ident;
    toJSON(message: Expr_Ident): unknown;
    fromPartial<I extends {
        name?: string;
    } & {
        name?: string;
    } & Record<Exclude<keyof I, "name">, never>>(object: I): Expr_Ident;
};
export declare const Expr_Select: {
    encode(message: Expr_Select, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_Select;
    fromJSON(object: any): Expr_Select;
    toJSON(message: Expr_Select): unknown;
    fromPartial<I extends {
        operand?: any;
        field?: string;
        testOnly?: boolean;
    } & {
        operand?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["operand"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["operand"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["operand"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["operand"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["operand"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["operand"], keyof Expr>, never>;
        field?: string;
        testOnly?: boolean;
    } & Record<Exclude<keyof I, keyof Expr_Select>, never>>(object: I): Expr_Select;
};
export declare const Expr_Call: {
    encode(message: Expr_Call, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_Call;
    fromJSON(object: any): Expr_Call;
    toJSON(message: Expr_Call): unknown;
    fromPartial<I extends {
        target?: any;
        function?: string;
        args?: any[];
    } & {
        target?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["target"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["target"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["target"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["target"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["target"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["target"], keyof Expr>, never>;
        function?: string;
        args?: any[] & ({
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["args"], keyof any[]>, never>;
    } & Record<Exclude<keyof I, keyof Expr_Call>, never>>(object: I): Expr_Call;
};
export declare const Expr_CreateList: {
    encode(message: Expr_CreateList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_CreateList;
    fromJSON(object: any): Expr_CreateList;
    toJSON(message: Expr_CreateList): unknown;
    fromPartial<I extends {
        elements?: any[];
    } & {
        elements?: any[] & ({
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["elements"], keyof any[]>, never>;
    } & Record<Exclude<keyof I, "elements">, never>>(object: I): Expr_CreateList;
};
export declare const Expr_CreateStruct: {
    encode(message: Expr_CreateStruct, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_CreateStruct;
    fromJSON(object: any): Expr_CreateStruct;
    toJSON(message: Expr_CreateStruct): unknown;
    fromPartial<I extends {
        type?: string;
        entries?: {
            id?: number;
            fieldKey?: string;
            mapKey?: any;
            value?: any;
        }[];
    } & {
        type?: string;
        entries?: {
            id?: number;
            fieldKey?: string;
            mapKey?: any;
            value?: any;
        }[] & ({
            id?: number;
            fieldKey?: string;
            mapKey?: any;
            value?: any;
        } & {
            id?: number;
            fieldKey?: string;
            mapKey?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["entries"][number]["mapKey"], keyof Expr>, never>;
            value?: {
                id?: number;
                literalExpr?: {
                    nullValue?: NullValue;
                    boolValue?: boolean;
                    int64Value?: any;
                    uint64Value?: any;
                    doubleValue?: number;
                    stringValue?: string;
                    bytesValue?: Uint8Array;
                };
                identExpr?: {
                    name?: string;
                };
                selectExpr?: {
                    operand?: any;
                    field?: string;
                    testOnly?: boolean;
                };
                callExpr?: {
                    target?: any;
                    function?: string;
                    args?: any[];
                };
                listExpr?: {
                    elements?: any[];
                };
                structExpr?: {
                    type?: string;
                    entries?: {
                        id?: number;
                        fieldKey?: string;
                        mapKey?: any;
                        value?: any;
                    }[];
                };
                comprehensionExpr?: {
                    iterVar?: string;
                    iterRange?: any;
                    accuVar?: string;
                    accuInit?: any;
                    loopCondition?: any;
                    loopStep?: any;
                    result?: any;
                };
            } & {
                [x: string]: any;
            } & Record<Exclude<keyof I["entries"][number]["value"], keyof Expr>, never>;
        } & Record<Exclude<keyof I["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["entries"], keyof {
            id?: number;
            fieldKey?: string;
            mapKey?: any;
            value?: any;
        }[]>, never>;
    } & Record<Exclude<keyof I, keyof Expr_CreateStruct>, never>>(object: I): Expr_CreateStruct;
};
export declare const Expr_CreateStruct_Entry: {
    encode(message: Expr_CreateStruct_Entry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_CreateStruct_Entry;
    fromJSON(object: any): Expr_CreateStruct_Entry;
    toJSON(message: Expr_CreateStruct_Entry): unknown;
    fromPartial<I extends {
        id?: number;
        fieldKey?: string;
        mapKey?: any;
        value?: any;
    } & {
        id?: number;
        fieldKey?: string;
        mapKey?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["mapKey"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["mapKey"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["mapKey"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["mapKey"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["mapKey"], keyof Expr>, never>;
        value?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["value"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["value"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["value"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["value"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["value"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["value"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["value"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["value"], keyof Expr>, never>;
    } & Record<Exclude<keyof I, keyof Expr_CreateStruct_Entry>, never>>(object: I): Expr_CreateStruct_Entry;
};
export declare const Expr_Comprehension: {
    encode(message: Expr_Comprehension, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Expr_Comprehension;
    fromJSON(object: any): Expr_Comprehension;
    toJSON(message: Expr_Comprehension): unknown;
    fromPartial<I extends {
        iterVar?: string;
        iterRange?: any;
        accuVar?: string;
        accuInit?: any;
        loopCondition?: any;
        loopStep?: any;
        result?: any;
    } & {
        iterVar?: string;
        iterRange?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["iterRange"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["iterRange"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["iterRange"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["iterRange"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["iterRange"], keyof Expr>, never>;
        accuVar?: string;
        accuInit?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["accuInit"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["accuInit"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["accuInit"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["accuInit"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["accuInit"], keyof Expr>, never>;
        loopCondition?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["loopCondition"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["loopCondition"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["loopCondition"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["loopCondition"], keyof Expr>, never>;
        loopStep?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["loopStep"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["loopStep"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["loopStep"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["loopStep"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["loopStep"], keyof Expr>, never>;
        result?: {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            };
            identExpr?: {
                name?: string;
            };
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            };
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            };
            listExpr?: {
                elements?: any[];
            };
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            };
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            };
        } & {
            id?: number;
            literalExpr?: {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & {
                nullValue?: NullValue;
                boolValue?: boolean;
                int64Value?: any;
                uint64Value?: any;
                doubleValue?: number;
                stringValue?: string;
                bytesValue?: Uint8Array;
            } & Record<Exclude<keyof I["result"]["literalExpr"], keyof Literal>, never>;
            identExpr?: {
                name?: string;
            } & {
                name?: string;
            } & Record<Exclude<keyof I["result"]["identExpr"], "name">, never>;
            selectExpr?: {
                operand?: any;
                field?: string;
                testOnly?: boolean;
            } & {
                operand?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                field?: string;
                testOnly?: boolean;
            } & Record<Exclude<keyof I["result"]["selectExpr"], keyof Expr_Select>, never>;
            callExpr?: {
                target?: any;
                function?: string;
                args?: any[];
            } & {
                target?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["target"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["target"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["target"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["target"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["callExpr"]["target"], keyof Expr>, never>;
                function?: string;
                args?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["callExpr"]["args"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["result"]["callExpr"], keyof Expr_Call>, never>;
            listExpr?: {
                elements?: any[];
            } & {
                elements?: any[] & ({
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["listExpr"]["elements"], keyof any[]>, never>;
            } & Record<Exclude<keyof I["result"]["listExpr"], "elements">, never>;
            structExpr?: {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[];
            } & {
                type?: string;
                entries?: {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[] & ({
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                } & {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["mapKey"], keyof Expr>, never>;
                    value?: {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        };
                        identExpr?: {
                            name?: string;
                        };
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        };
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        };
                        listExpr?: {
                            elements?: any[];
                        };
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        };
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        };
                    } & {
                        id?: number;
                        literalExpr?: {
                            nullValue?: NullValue;
                            boolValue?: boolean;
                            int64Value?: any;
                            uint64Value?: any;
                            doubleValue?: number;
                            stringValue?: string;
                            bytesValue?: Uint8Array;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["literalExpr"], keyof Literal>, never>;
                        identExpr?: {
                            name?: string;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["identExpr"], "name">, never>;
                        selectExpr?: {
                            operand?: any;
                            field?: string;
                            testOnly?: boolean;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["selectExpr"], keyof Expr_Select>, never>;
                        callExpr?: {
                            target?: any;
                            function?: string;
                            args?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["callExpr"], keyof Expr_Call>, never>;
                        listExpr?: {
                            elements?: any[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["listExpr"], "elements">, never>;
                        structExpr?: {
                            type?: string;
                            entries?: {
                                id?: number;
                                fieldKey?: string;
                                mapKey?: any;
                                value?: any;
                            }[];
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["structExpr"], keyof Expr_CreateStruct>, never>;
                        comprehensionExpr?: {
                            iterVar?: string;
                            iterRange?: any;
                            accuVar?: string;
                            accuInit?: any;
                            loopCondition?: any;
                            loopStep?: any;
                            result?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                    } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number]["value"], keyof Expr>, never>;
                } & Record<Exclude<keyof I["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["structExpr"]["entries"], keyof {
                    id?: number;
                    fieldKey?: string;
                    mapKey?: any;
                    value?: any;
                }[]>, never>;
            } & Record<Exclude<keyof I["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
            comprehensionExpr?: {
                iterVar?: string;
                iterRange?: any;
                accuVar?: string;
                accuInit?: any;
                loopCondition?: any;
                loopStep?: any;
                result?: any;
            } & {
                iterVar?: string;
                iterRange?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                accuVar?: string;
                accuInit?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                loopCondition?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                loopStep?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                result?: {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    };
                    identExpr?: {
                        name?: string;
                    };
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    };
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    };
                    listExpr?: {
                        elements?: any[];
                    };
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    };
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    };
                } & {
                    id?: number;
                    literalExpr?: {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & {
                        nullValue?: NullValue;
                        boolValue?: boolean;
                        int64Value?: any;
                        uint64Value?: any;
                        doubleValue?: number;
                        stringValue?: string;
                        bytesValue?: Uint8Array;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["literalExpr"], keyof Literal>, never>;
                    identExpr?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["identExpr"], "name">, never>;
                    selectExpr?: {
                        operand?: any;
                        field?: string;
                        testOnly?: boolean;
                    } & {
                        operand?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["selectExpr"]["operand"], keyof Expr>, never>;
                        field?: string;
                        testOnly?: boolean;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["selectExpr"], keyof Expr_Select>, never>;
                    callExpr?: {
                        target?: any;
                        function?: string;
                        args?: any[];
                    } & {
                        target?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["callExpr"]["target"], keyof Expr>, never>;
                        function?: string;
                        args?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["callExpr"]["args"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["callExpr"]["args"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["callExpr"], keyof Expr_Call>, never>;
                    listExpr?: {
                        elements?: any[];
                    } & {
                        elements?: any[] & ({
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["listExpr"]["elements"][number], keyof Expr>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["listExpr"]["elements"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["listExpr"], "elements">, never>;
                    structExpr?: {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[];
                    } & {
                        type?: string;
                        entries?: {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[] & ({
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["structExpr"]["entries"][number], keyof Expr_CreateStruct_Entry>, never>)[] & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["structExpr"]["entries"], keyof {
                            id?: number;
                            fieldKey?: string;
                            mapKey?: any;
                            value?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["structExpr"], keyof Expr_CreateStruct>, never>;
                    comprehensionExpr?: {
                        iterVar?: string;
                        iterRange?: any;
                        accuVar?: string;
                        accuInit?: any;
                        loopCondition?: any;
                        loopStep?: any;
                        result?: any;
                    } & {
                        iterVar?: string;
                        iterRange?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["comprehensionExpr"]["iterRange"], keyof Expr>, never>;
                        accuVar?: string;
                        accuInit?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["comprehensionExpr"]["accuInit"], keyof Expr>, never>;
                        loopCondition?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopCondition"], keyof Expr>, never>;
                        loopStep?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["comprehensionExpr"]["loopStep"], keyof Expr>, never>;
                        result?: {
                            id?: number;
                            literalExpr?: {
                                nullValue?: NullValue;
                                boolValue?: boolean;
                                int64Value?: any;
                                uint64Value?: any;
                                doubleValue?: number;
                                stringValue?: string;
                                bytesValue?: Uint8Array;
                            };
                            identExpr?: {
                                name?: string;
                            };
                            selectExpr?: {
                                operand?: any;
                                field?: string;
                                testOnly?: boolean;
                            };
                            callExpr?: {
                                target?: any;
                                function?: string;
                                args?: any[];
                            };
                            listExpr?: {
                                elements?: any[];
                            };
                            structExpr?: {
                                type?: string;
                                entries?: {
                                    id?: number;
                                    fieldKey?: string;
                                    mapKey?: any;
                                    value?: any;
                                }[];
                            };
                            comprehensionExpr?: {
                                iterVar?: string;
                                iterRange?: any;
                                accuVar?: string;
                                accuInit?: any;
                                loopCondition?: any;
                                loopStep?: any;
                                result?: any;
                            };
                        } & {
                            [x: string]: any;
                        } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
                    } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
                } & Record<Exclude<keyof I["result"]["comprehensionExpr"]["result"], keyof Expr>, never>;
            } & Record<Exclude<keyof I["result"]["comprehensionExpr"], keyof Expr_Comprehension>, never>;
        } & Record<Exclude<keyof I["result"], keyof Expr>, never>;
    } & Record<Exclude<keyof I, keyof Expr_Comprehension>, never>>(object: I): Expr_Comprehension;
};
export declare const Literal: {
    encode(message: Literal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Literal;
    fromJSON(object: any): Literal;
    toJSON(message: Literal): unknown;
    fromPartial<I extends {
        nullValue?: NullValue;
        boolValue?: boolean;
        int64Value?: any;
        uint64Value?: any;
        doubleValue?: number;
        stringValue?: string;
        bytesValue?: Uint8Array;
    } & {
        nullValue?: NullValue;
        boolValue?: boolean;
        int64Value?: any;
        uint64Value?: any;
        doubleValue?: number;
        stringValue?: string;
        bytesValue?: Uint8Array;
    } & Record<Exclude<keyof I, keyof Literal>, never>>(object: I): Literal;
};
